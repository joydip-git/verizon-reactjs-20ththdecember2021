1. promise and asynchronity
2. arrow function, rest and spread operator, object destructuring

Node js

3. module concepts
	a. module: an API to expose members of one file to thers
	b. module format: format in which we export members from one file and import them in another file
		i. common js format:
			exporting: module.exports = {prop1:member1, prop2:member2,....}
			importing: const moduleExports = require('module-name with relative path')
			Note: this is the default format for creatng modules in Node JS application

		ii. ES6 format:
			exporting: export member1
			import: import {member1} from 'module-name with relative path'
		note: in node js you can use it, but Node by default does not support it. hence you require module loader which understands ES6 module format

		iii. Asynchronous Module Format(AMD):
		if you are using require js as module loader for browser application, then choose this module format to create your modular code, since require js expects the modules should be written in AMD format
		iv.  Universal Module Definition (UMD) format


	c. module loader:
		which interprets different module import export format and accordingly resolves the dependencies between modules
		note: 
		Node JS runtime has a module loader whoch understands the common js format.
		Browser does not support modular code and do not have any module loader s/w
		soln: supply module loader s/w to the browser

		i. require js
		ii. system js

4. transpilation concepts
	a. transpilation: converting new JS version code back to older JS version code
	b. transpilers: 
		JS: babel
		babel packages: 
			core: npm i @babel/core @babel/cli -D
			plugins:
			@babel/plugin-transform-classes
			@babel/plugin-transform-***
			@babel/plugin-transform-block-scoping
			const, let, class, super, extends, 

			preset: collection of plugins
			@babel/preset-env: to convert ES6+ features back to older version (backward-compatible) of JS
			@babel/preset-react
			
		babel configuration
		possible file names: .babelrc, .babelrc.json, babel.config.json
	
		TS: tsc


5. bundling concepts
	a. bundler: webpack, browserify etc.
	b. different bundlers
	c. create dev and prod bundles
	d. loaders
	e. webpack configuration

6. development server
	a. different dev servers: lite-server, webpack-dev-server
	


Module {
  id: '.',
  path: 'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\modular-app\\src',
  exports: {},
  filename: 'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\modular-app\\src\\index.js',
  loaded: false,
  children: [],  
paths: [
    'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\modular-app\\src\\node_modules',
    'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\modular-app\\node_modules',
    'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\node_modules',
    'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\node_modules',
    'E:\\training\\verizon-reactjs-20ththdecember2021\\node_modules',
    'E:\\training\\node_modules',
    'E:\\node_modules'
  ]
}

with common js require method:
require is not defined at index.js:1

modules not being in th AMD format:
Module name "manager/employeemanager" has not been loaded yet for context: _. Use require([])

with ES6 import statement:
Cannot use import statement outside a module


1. convert module format from ES6/common js/others to AMD format so that require js module loader understands and loads the modules
2. get your JS code with latest version features converted to older version to make sure anyone using even the oldest version of any browser can visit your web site/app



package managers: npm (node_modules), yarn (node_modules), bower (bower_components)


language: JS
application building: client-side

component:
table.html (partial/content)
<input type='text'/>
<table>
</table>
code:
table.js

table.js --> design + code (supplies data to the design and interacts with the design via events)


add.html (partial/content)
<form>
	<button type='submit'>Add</button>
</form>
add.js

view.html (partial/content)
<form>
</form>
view.js


http://..../home
http://..../add
http://..../view/1

index.html --> single page
<html>
	<head>....</head>
	<body>
		<div id='main'>
			<!--here goes the design-->	
		</div>
	</body>
</html>



SPA: bulit upon components (design/content + code)

Angular:
MV - C/VM

React (view layer)
1. create reusable components
2. fast performance
3. to build simple to large application UI layer
4. one way data flow

1. do not want to supply module loader manually
2. do not want to link main/entry file in the dist folder
3. do not want to do manual transpilation by running the script
4. want to create dev/prod build
	a. all js files first should be transpiled and then all transpiled code should be placed into single bundle file 
	b. the dev/prod build folder should also contain the HTML file
5. also the required react packages also be part of the dev/prod folder

6. i want to replace the lite-server (dev-level server) by something more powerful dev server (optional)

create-react-app

