1. promise and asynchronity
2. arrow function, rest and spread operator, object destructuring

Node js

3. module concepts
	a. module: an API to expose members of one file to thers
	b. module format: format in which we export members from one file and import them in another file
		i. common js format:
			exporting: module.exports = {prop1:member1, prop2:member2,....}
			importing: const moduleExports = require('module-name with relative path')
			Note: this is the default format for creatng modules in Node JS application

		ii. ES6 format:
			exporting: export member1
			import: import {member1} from 'module-name with relative path'
		note: in node js you can use it, but Node by default does not support it. hence you require module lodaer which understands ES6 module format

		iii. Asynchronous Module Format(AMD):
		iv.  Universal Module Definition (UMD) format


	c. module loader:
		which interprets different module import export format and accordingly resolves the dependencies between modules

4. transpilation concepts
	a. transpilation
	b. transpilers
5. bundling concepts
	a. bundler 
	b. different bundlers
	c. create dev and prod bundles
	d. loaders
6. development server
	a. different dev servers
	b. webpack
	c. webpack configuration


Module {
  id: '.',
  path: 'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\modular-app\\src',
  exports: {},
  filename: 'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\modular-app\\src\\index.js',
  loaded: false,
  children: [],  
paths: [
    'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\modular-app\\src\\node_modules',
    'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\modular-app\\node_modules',
    'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\day-2\\node_modules',
    'E:\\training\\verizon-reactjs-20ththdecember2021\\codes\\node_modules',
    'E:\\training\\verizon-reactjs-20ththdecember2021\\node_modules',
    'E:\\training\\node_modules',
    'E:\\node_modules'
  ]
}

